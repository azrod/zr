/*
 * Copyright 2019-present Open Networking Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package mocks

import (
	"fmt"
	"log"
	"os"
	"testing"
	"time"

	"github.com/azrod/zr/pkg/db"
	"github.com/azrod/zr/pkg/db/etcd"
	"github.com/azrod/zr/pkg/hotreload/backend"
	"github.com/phayes/freeport"
	"github.com/stretchr/testify/assert"
)

var etcdServer *EtcdServer
var client *etcd.DBETCD

func setup() {
	clientPort, err := freeport.GetFreePort()
	if err != nil {
		log.Fatal(err)
	}
	peerPort, err := freeport.GetFreePort()
	if err != nil {
		log.Fatal(err)
	}
	etcdServer = StartEtcdServer(MKConfig("zr.mock.test", clientPort, peerPort, "zr.lib.mocks.etcd", "error"))
	if etcdServer == nil {
		log.Fatal("Embedded server failed to start")
	}
	clientAddr := fmt.Sprintf("localhost:%d", clientPort)
	client, err = etcd.NewClient(backend.ConfigBackendETCD{
		Endpoints:   []string{clientAddr},
		DialTimeout: 5 * time.Second,
		TLS:         nil,
	})
	if err != nil || client == nil {
		etcdServer.Stop()
		log.Fatal("Failed to create an Etcd client")
	}
}

func TestEtcdServerRWOLD(t *testing.T) {
	key := "myKey-1"
	value := db.DataHotReload{
		LogLevel:  "debug",
		LogFormat: "json",
	}

	err := client.Set(key, value, 10)
	assert.Nil(t, err)

	kv, err := client.Get(key, 10)
	assert.Nil(t, err)
	assert.NotNil(t, kv)
	assert.Equal(t, value, kv)
}
func shutdown() {
	if client != nil {
		client.Close()
	}
	if etcdServer != nil {
		etcdServer.Stop()
	}
}
func TestMain(m *testing.M) {
	setup()
	code := m.Run()
	shutdown()
	os.Exit(code)
}
